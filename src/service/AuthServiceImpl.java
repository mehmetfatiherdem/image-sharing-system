package service;

import dto.LoginDTO;
import helper.format.Message;
import helper.security.Authentication;
import helper.security.Confidentiality;
import model.User;
import repository.UserRepository;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.Socket;
import java.security.PublicKey;
import java.util.Arrays;
import java.util.Base64;

public class AuthServiceImpl implements AuthService {

    private final UserRepository userRepository;
    private final Socket socket;

    public AuthServiceImpl(UserRepository userRepository, Socket socket) {
        this.userRepository = userRepository;
        this.socket = socket;
    }

    @Override
    public void login(String username, String password) {

        try {
            var user = userRepository.getUser(username);
            var salt = new byte[256];

            if (user.isPresent()) {
                salt = user.get().getPasswordSalt();
            } else {
                System.out.println("User not found");
                return;
            }

            // FIXME: encrypt the pword with server's public key hash it on the server side

            byte[] passwordHash = Authentication.hashPassword(password, salt);
            LoginDTO loginDTO = new LoginDTO(username, passwordHash);
            DataOutputStream out = new DataOutputStream(socket.getOutputStream());

            String nonce = Authentication.generateNonce();

            var privateKey = userRepository.getPrivateKey(username);

            var signedMessage = Authentication.sign(nonce.getBytes(), privateKey.orElseThrow());

            String loginMessagePayload = "LOGIN" + " " + loginDTO.getLoginString() + " "
                    + Arrays.toString(signedMessage);

            //String loginMessage = Authentication.appendMACToMessage();

            //out.writeUTF(loginMessage);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void register(String username, String password) {
        try {
            DataOutputStream out = new DataOutputStream(socket.getOutputStream());
            DataInputStream in = new DataInputStream(new BufferedInputStream(socket.getInputStream()));

            String helloMsg = Message.formatMessage("HELLO");

            out.writeUTF(helloMsg);

            String serverResponse = in.readUTF();
            User user = new User(username, password);

            PublicKey publicKey = user.getKeyPair().getPublic();


            var messageKeyValues = Message.getKeyValuePairs(serverResponse);


            /*
            System.out.println("client received key: \n");

            for (Map.Entry<String, String> entry : messageKeyValues.entrySet()) {
                System.out.println(entry.getKey() + " : " + entry.getValue() + "\n");
            }


             */


            if (messageKeyValues.get("message").equals("PUBLICKEY")) {
            /*
                for (Map.Entry<String, String> entry : messageKeyValues.entrySet()) {
                    System.out.println(entry.getKey() + " : \n" + entry.getValue() + "\n");

                }


             */

                user.getUserStorage().setServerPublicKey(Base64.getDecoder().decode(messageKeyValues.get("publicKey")));
                //System.out.println("Server public key received: " + Arrays.toString(messageKeyValues.get("publicKey").getBytes()));

            } else {
                System.out.println("Invalid message");
                System.exit(1);
            }


            //System.out.println("Server public key: " + Arrays.toString(user.getUserStorage().getServerPublicKey()));


            PublicKey serverPublicKey = Confidentiality.getPublicKeyFromByteArray(user.getUserStorage().getServerPublicKey());

            // send MAC key to server
            byte[] macKey = Authentication.generateMACKey();

            System.out.println("[client] MAC key: " + Arrays.toString(macKey));



            String macKeyString = Message.formatMessage("MAC", new String[]{"secretMessage", "macKey"},
                    new String[]{"Secretmsg", Confidentiality.encodeByteKeyToStringBase64(macKey)});
            byte[] encryptedMacKey = Confidentiality.encryptWithPublicKey(macKeyString.getBytes(), serverPublicKey);
            System.out.println("MAC generated by client: " + Arrays.toString(Authentication.generateMAC("Secretmsg123!".getBytes(), macKey)));

            out.writeUTF(Arrays.toString(encryptedMacKey));



            /*
            String _registerMessagePayload
                    = "REGISTER" + " " + username + " " + password
                    + " " + Arrays.toString(user.getPasswordSalt())
                    + " " + publicKey.toString();

            String registerMessagePayload = Authentication.appendMACToMessage(_registerMessagePayload.getBytes(), MAC);

            // FIXME: maybe add nonce to avoid replay attacks

            // encrypt the message with the server's public key
            byte[] encryptedMessage = Confidentiality.encryptWithSymmetricKey(registerMessagePayload.getBytes(), serverPublicKey);

            // send the encrypted message to the server
            out.writeUTF(Arrays.toString(encryptedMessage));

*/

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void logout() {

    }
}
